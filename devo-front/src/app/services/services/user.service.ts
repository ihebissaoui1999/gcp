/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map, switchMap } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { getAllUsers } from '../fn/user/get-all-users';
import { GetAllUsers$Params } from '../fn/user/get-all-users';
import { UserResponse } from '../models/user-response';

@Injectable({ providedIn: 'root' })
export class UserService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getAllUsers()` */
  static readonly GetAllUsersPath = '/api/v1/users';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllUsers()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllUsers$Response(params?: GetAllUsers$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<UserResponse>>> {
    return getAllUsers(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllUsers$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllUsers(params?: GetAllUsers$Params, context?: HttpContext): Observable<Array<UserResponse>> {
    return this.getAllUsers$Response(params, context).pipe(
      switchMap((r: StrictHttpResponse<any>) => {
        // Check if the response body is a Blob (binary data)
        if (r.body instanceof Blob) {
          return this.blobToJson(r.body);  // Convert Blob to JSON array
        }
        // Otherwise, directly return the expected array
        return new Observable<Array<UserResponse>>((observer) => {
          observer.next(r.body);  // Emit the response body directly
          observer.complete(); // Complete the observable
        });
      })
    );
  }

  // Helper method to convert Blob to JSON array
  private blobToJson(blob: Blob): Observable<Array<UserResponse>> {
    return new Observable<Array<UserResponse>>((observer) => {
      const reader = new FileReader();

      // Handle successful reading of the Blob
      reader.onloadend = () => {
        try {
          const jsonResponse = JSON.parse(reader.result as string);

          // Ensure the parsed response is an array
          if (Array.isArray(jsonResponse)) {
            observer.next(jsonResponse);  // Emit the parsed array
            observer.complete();  // Complete the observable
          } else {
            observer.error('Expected an array of users, but received something else.');
          }
        } catch (error) {
          observer.error('Error parsing Blob response: ' + error);  // Handle JSON parsing errors
        }
      };

      // Handle Blob read errors
      reader.onerror = (err) => {
        observer.error('Error reading Blob: ' + err);
      };

      // Start reading the Blob as text
      reader.readAsText(blob);
    });
  }
  getUsers(): Observable<UserResponse[]> {
    return this.http.get<UserResponse[]>('http://backend.backend.svc.cluster.local:8081/api/v1/users');
  }

}
